<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration SYSTEM "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<!-- hibernate.cfg.xml -->
<!-- The root tag -->
<hibernate-configuration>

	<session-factory> <!-- this tag begins configurations details for the hibernate app -->
		<!-- Configuring the database -->
		<!-- This is like the jdbc class.forName() -->
		<property name="hibernate.connection.driver_class">
			oracle.jdbc.OracleDriver
		</property>

		<!-- Configures the database engine we intend to use -->
		<!-- If you ever change languages, this property MUST change as well-->
		<property name="hibernate.dialect">
			org.hibernate.dialect.Oracle10gDialect
		</property>
		
		<!-- Typical JDBC url requirement -->
		<property name="hibernate.connection.url">
			jdbc:oracle:thin:@localhost:1521:xe
		</property>
		
		<property name="hibernate.connection.username">
			local_180616
		</property>
		
		<property name="hibernate.connection.password">
			admin
		</property>
		
		<!-- This determines how many connections a single user cna have to the database.
		Allowing for multiple connections allows for concurrent, and therefore faster,
		database interaction.
		However, you can quickly reach the databse cap in AWS if you let each user have a 
		large amount of connections. -->
		<property name="hibernate.connection.pool_size">
			3
		</property>
		
		<!-- Shows SQL queries that hibernate is using behind the scenes in the console -->
		<property name="show_sql">
			true
		</property>

		<!-- hibernate mapping to data definition language -->
		<property name="hibernate.hbm2ddl.auto">
			update
		</property>
		<!-- There are 4 different states youc an place it as:
		 create: Wipe anye existing database tables and create it from scratch
		 update: perform hibernate actions on existing database
		 validate: creates the schema, destroying old data
		 create-drop: database is cleared and emptied upon server shutdown.-->

		<!-- 2nd level cache properties -->
		<property name="hibernate.cache.region.factory_class">
			org.hibernate.cache.ehchache.EhCacheRegionFactory
		</property>
		<property name="hibernate.cache.use_second_level_cache">
			true	
		</property>
		<property name="hibernate.cache.use_query_cache">
			true
			<!-- Though there are TWO levels of cache, there is technically a 3rd
			level called 'query cache'. However all it does is cache HQL query
			results, so it is not considered along side L1 and L2 -->
		</property>
		
		<!-- <mapping resource="person.hbm.xml" /> -->
		<mapping class="com.revature.beans.Person"/>
		<mapping class="com.revature.beans.Item"/>
		<mapping class="com.revature.beans.Shop"/>
		<mapping class="com.revature.beans.Npc"/>
		<mapping class="com.revature.beans.Job"/>

	</session-factory>
</hibernate-configuration>