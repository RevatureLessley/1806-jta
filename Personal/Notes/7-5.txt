1)  Client sends a HTTP GET request by default as a flat file without extensions.
2)  Server forwards the request and sends an empty response file to the web container.
3)  Web container checks the deployment descriptor (web.xml) for forwarding.
4)  If the request is not for the index page, the Web container wraps the request/response as a Java object and sends it to the proper servlet.
4A) If the servlet isn't instantiated, the web container calls the init() method.
4B) The request/response is sent to the servlet for processing. Multiple requests/responses are multithreaded through the thread pool.
4C) At server shutdown or timeout, the webcontainer calls the destroy() method.
5)  The response is contructed and sent back with the request to the web container.
6)  The web container unwraps the object and the flat files forwards to the server.
7)  Server forwards to the client which displays the response depending on the status code.

Front End
---------
-html
-css
-angular
-javascript
-user sees these
|
Middleware: Servlets
--------------------
-deployment descriptor
|
Middleware: Service
-------------------
-service methods
|
Middleware: DAO
---------------
-grabs data
|
Back End: DB
------------

HttpServlets should not override the service methods. doGet() is called by  service() for GET. doPost() is called by service for POST.

Request Headers
-requests/responses have headers that contain key-value pairs containing metadata.
-Request headers typically include:
	--accept: file types allowed to be received/returned
	--authorization: header used for identification
	--connection: determines how long a connection lasts
	--cookie: stores cookies previously received by the browser.
	--host: specifies host and port.
	--user agent: identifies browser and react to specific browsers.
-Response Headers
	--allow: specifies which HTTP methods are supported by server
	--connection: determines persistence of connection to server.
	--expires: determines when web page should no longer be cached.
	--refresh: sets timer for reloading web page.
	--set-cookies: specifies a cookies with a page.

GET vs POST
-User input is stored in a header with a key called query string. 
-GET stores it in the URL with a max size of 1024 bytes, information is exposed.
-GET separates parameters by a ? followed by key=value@key2=value2... 
-POST stores it in the request body so information is hidden and limited by memory.

Status Code
-100 series: informational
	--100 Continue: request has not been fully received.
-200 series: success
	--200 OK
	--201 Created: file created
	--202 Accepted: still waiting final response.
-300 series: redirection
	--301 Page Moved Permenantly
	--302 Page Moved Temporarily
-400 series: Client Error
	--400 Bad Request: server confused.
	--401 Unauthorized: incorrect username/passsword.
	--403 Forbidden: correct login but bad role.
	--404 Not Found
	--418 I am a teapot
-500 series: Server Error
	--500 Exception on Server
	--503 Server Down

Request
GET localhost:8080/GETvsPOST Http/1.1
accept = blah
cookie = blah
.
.
.
Query_String=param1=blah;param2=blah;

POST localhost:8080/GETvsPOST Http/1.1
accept = blah
cookie = blah
.
.
.
<body>
Query_String=param1=blah;param2=blah;
</body>

Response
Http/1.1 200 OK
header1: blah
header2: blah
.
.
.
<html>
	<head>
	</head>
	<body>
	</body>
</html>

Session Tracking
-http is stateless
	--For every page received by the server, a separate connection is made to the server. Any information about the last connection is lost.
-4 ways to track sessions:
	--URL rewriting: bad
	--hidden fields: bad
	--cookies: neutral
	--JSession: good

URL Rewriting
-------------
-append a manually generated session id to the end of the url.

Hidden Fields
-------------
-<input type="hidden">

Cookies
-------
-flat files with cookies name and value with other metadata.

JSession
--------
-creates a dynamic id and stores it as a cookie clientside and also stores it serverside.
-can invalidate sessions serverside.